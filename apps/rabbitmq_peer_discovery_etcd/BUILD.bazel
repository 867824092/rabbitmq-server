load("@bazel-erlang//:xref.bzl", "xref")
load("@bazel-erlang//:dialyze.bzl", "dialyze")
load(
    "//:rabbitmq.bzl",
    "RABBITMQ_DIALYZER_OPTS",
    "broker_for_integration_suites",
    "rabbitmq_integration_suite",
    "rabbitmq_lib",
    "rabbitmq_suite",
)

APP_NAME = "rabbitmq_peer_discovery_etcd"

APP_DESCRIPTION = "etcd-based RabbitMQ peer discovery backend"

APP_MODULE = "rabbitmq_peer_discovery_etcd_app"

DEPS = [
    "//apps/rabbit_common:bazel_erlang_lib",
    "//apps/rabbitmq_peer_discovery_common:bazel_erlang_lib",
]

RUNTIME_DEPS = [
    "//apps/rabbit:bazel_erlang_lib",
    "@eetcd//:bazel_erlang_lib",
    "@gun//:bazel_erlang_lib",
]

rabbitmq_lib(
    app_description = APP_DESCRIPTION,
    app_module = APP_MODULE,
    app_name = APP_NAME,
    runtime_deps = RUNTIME_DEPS,
    deps = DEPS,
)

xref(tags = ["xref"])

dialyze(
    dialyzer_opts = RABBITMQ_DIALYZER_OPTS,
    plt = "//:base_plt",
    tags = ["dialyze"],
)

broker_for_integration_suites()

PACKAGE = "apps/rabbitmq_peer_discovery_etcd"

rabbitmq_integration_suite(
    PACKAGE,
    name = "config_schema_SUITE",
)

rabbitmq_suite(
    name = "system_SUITE",
    size = "small",
    data = [
        "@rabbitmq_ct_helpers//tools/tls-certs:Makefile",
        "@rabbitmq_ct_helpers//tools/tls-certs:openssl.cnf.in",
    ],
    test_env = {
        "RABBITMQ_RUN": "true",  # <- tell rabbitmq_ct_helpers this is bazel without actually depending on the broker
    },
    runtime_deps = [
        "@rabbitmq_ct_helpers//:bazel_erlang_lib",
    ],
)

rabbitmq_suite(
    name = "unit_SUITE",
    size = "small",
)
