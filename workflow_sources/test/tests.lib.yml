#@ load("@ytt:data", "data")
#@ load("util.star", "to_build_args")
#@ load("helpers.star", "ci_image", "ci_image_tag", "skip_ci_condition")

#@ def tests_job(dep, erlang_version=None):
name: #@ dep.name
needs: [prepare]
runs-on: ubuntu-18.04
if: #@ skip_ci_condition()
#@yaml/text-templated-strings
steps:
  - name: CHECKOUT REPOSITORY
    uses: actions/checkout@v2
  - name: COMPUTE TEST RESULT CACHE KEY
    id: analysis
    run: |
      tree_hash=$(git rev-parse HEAD:deps/(@= dep.name @))
      echo "::set-output name=test_result_cache_key::$tree_hash"
  - name: FETCH TEST RESULT CACHE
    id: cache
    uses: actions/cache@v2
    with:
      path: test-result-cache/(@= dep.name @)
      key: ${{ steps.analysis.outputs.test_result_cache_key }}
  - name: CONFIGURE OTP & ELIXIR
    if: steps.cache.outputs.cache-hit != 'true'
    uses: actions/setup-elixir@v1
    with:
      otp-version: #@ erlang_version
      elixir-version: #@ data.values.elixir_version
  #@ if getattr(dep, 'needs_slapd', False):
  - name: INSTALL slapd
    if: steps.cache.outputs.cache-hit != 'true'
    run: |
      sudo apt-get install -y -V --fix-missing --no-install-recommends \
        debconf-utils

      echo 'slapd    slapd/internal/generated_adminpw    password   rabbitmq' | sudo debconf-set-selections && \
      echo 'slapd    slapd/internal/adminpw    password   rabbitmq' | sudo debconf-set-selections && \
      echo 'slapd    slapd/password2    password   rabbitmq' | sudo debconf-set-selections && \
      echo 'slapd    slapd/password1    password   rabbitmq' | sudo debconf-set-selections && \
      echo 'slapd    slapd/backend    select    HDB' | sudo debconf-set-selections

      sudo apt-get install -y -V --fix-missing --no-install-recommends \
        ldap-utils \
        netcat \
        python-dev \
        python-simplejson \
        python3 \
        slapd
  #@ end
  #@ if getattr(dep, 'needs_daemonize', False):
  - name: INSTALL daemonize
    if: steps.cache.outputs.cache-hit != 'true'
    run: |
      sudo apt-get install -y -V --fix-missing --no-install-recommends \
        daemonize
  #@ end
  #@ tests_cmd = " || ".join(["run_tests"] * getattr(dep, 'attempts', 1))
  #@ if getattr(dep, 'use_terraform', False):
  - name: RUN TESTS
    if: steps.cache.outputs.cache-hit != 'true'
    run: |
      echo "${{ secrets.TERRAFORM_SSH_KEY }}" > id_rsa_terraform
      echo "${{ secrets.TERRAFORM_SSH_KEY_PUB }}" > id_rsa_terraform.pub

      function run_tests() {
        make -C deps/(@= dep.name @) tests \
          base_rmq_ref=(@= data.values.base_rmq_ref @) \
          current_rmq_ref=${{ steps.ref.outputs.branch_or_tag_name }} \
          FULL= \
          FAIL_FAST=1 \
          SKIP_AS_ERROR=1 \
          ERLANG_VERSION=(@= erlang_version @) \
          AWS_ACCESS_KEY_ID=${{ secrets.CONCOURSE_AWS_ACCESS_KEY_ID }} \
          AWS_SECRET_ACCESS_KEY=${{ secrets.CONCOURSE_AWS_SECRET_ACCESS_KEY }} \
          SSH_KEY=$PWD/id_rsa_terraform
      }
      (@= tests_cmd @)
      mkdir -p test-result-cache
      date > test-result-cache/(@= dep.name @)
  #@ else:
  - name: RUN TESTS
    if: steps.cache.outputs.cache-hit != 'true'
    run: |
      function run_tests() {
        make -C deps/(@= dep.name @) tests \
          base_rmq_ref=(@= data.values.base_rmq_ref @) \
          current_rmq_ref=${{ steps.ref.outputs.branch_or_tag_name }} \
          FULL= \
          FAIL_FAST=1 \
          SKIP_AS_ERROR=1
      }
      (@= tests_cmd @)
  #@ end
  - name: ON FAILRUE ARCHIVE TESTS LOGS
    if: failure()
    run: |
      make -C deps/(@= dep.name @) ct-logs-archive
  - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
    #! https://github.com/marketplace/actions/upload-artifact
    uses: actions/upload-artifact@v2-preview
    if: failure()
    with:
      name: (@= dep.name @)-ct-logs
      path: "deps/(@= dep.name @)/*-ct-logs-*.tar.xz"
  - name: CACHE SUCCESSFUL TEST RESULT
    if: steps.cache.outputs.cache-hit != 'true'
    run: |
      mkdir -p test-result-cache
      date > test-result-cache/(@= dep.name @)
#@ end
