#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")
#@ load("util.star", "to_build_args")
#@ load("helpers.star", "ci_image", "ci_image_tag", "skip_ci_condition")

#@ def tests_job(dep, erlang_version=None):
name: #@ dep.name
needs: [prepare]
runs-on: ubuntu-18.04
if: #@ skip_ci_condition()
#@yaml/text-templated-strings
steps:
  - name: CHECKOUT REPOSITORY
    uses: actions/checkout@v2
  - name: COMPUTE TEST RESULT CACHE KEY
    id: analysis
    run: |
      common_tree_hash=$(git rev-parse HEAD:deps/rabbit_common)
      dep_tree_hash=$(git rev-parse HEAD:deps/(@= dep.name @))
      echo "::set-output name=test_result_cache_key::${common_tree_hash}-${dep_tree_hash}"
  - name: FETCH TEST RESULT CACHE
    id: cache
    uses: actions/cache@v2
    with:
      path: test-result-cache/(@= dep.name @)
      key: ${{ steps.analysis.outputs.test_result_cache_key }}
  - name: CONFIGURE OTP & ELIXIR
    if: steps.cache.outputs.cache-hit != 'true'
    uses: actions/setup-elixir@v1
    with:
      otp-version: #@ erlang_version
      elixir-version: #@ data.values.elixir_version
  #@ if getattr(dep, 'needs_daemonize', False):
  - name: INSTALL daemonize
    if: steps.cache.outputs.cache-hit != 'true'
    run: |
      sudo apt-get install -y -V --fix-missing --no-install-recommends \
        daemonize
  #@ end
  #@ tests_cmd = " || ".join(["run_tests"] * getattr(dep, 'attempts', 1))
  #@ if getattr(dep, 'use_terraform', False):
  #@   assert.fail('needs_slapd and use_terraform are mutually exlusive') if getattr(dep, 'needs_slapd', False) else None
  - name: SETUP TERRAFORM
    uses: hashicorp/setup-terraform@v1
    with:
      terraform_version: 0.12.24
  - name: RUN TESTS
    if: steps.cache.outputs.cache-hit != 'true'
    run: |
      echo "${{ secrets.TERRAFORM_SSH_KEY }}" > id_rsa_terraform
      echo "${{ secrets.TERRAFORM_SSH_KEY_PUB }}" > id_rsa_terraform.pub

      function run_tests() {
        make -C deps/(@= dep.name @) tests \
          base_rmq_ref=(@= data.values.base_rmq_ref @) \
          current_rmq_ref=${{ steps.ref.outputs.branch_or_tag_name }} \
          FULL= \
          FAIL_FAST=1 \
          SKIP_AS_ERROR=1 \
          ERLANG_VERSION=(@= erlang_version @) \
          AWS_ACCESS_KEY_ID=${{ secrets.CONCOURSE_AWS_ACCESS_KEY_ID }} \
          AWS_SECRET_ACCESS_KEY=${{ secrets.CONCOURSE_AWS_SECRET_ACCESS_KEY }} \
          SSH_KEY=$PWD/id_rsa_terraform
      }
      (@= tests_cmd @)
  #@ elif getattr(dep, 'needs_slapd', False):
  #@   assert.fail('needs_slapd and use_terraform are mutually exlusive') if getattr(dep, 'use_terraform', False) else None
  - name: Set up QEMU
    uses: docker/setup-qemu-action@v1
  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v1
  - name: Login to GCR
    uses: docker/login-action@v1
    with:
      registry: eu.gcr.io
      username: _json_key
      password: ${{ secrets.GCR_JSON_KEY }}
  - name: PREPARE BUILD IMAGE
    uses: docker/build-push-action@v2
    with:
      load: true
      file: ci/dockerfiles/ci
      tags: #@ ci_image(erlang_version)
      #@ rabbitmq_version = data.values.base_rmq_ref.replace('master', '3.9.x').replace('.x', '.0')
      build-args: |
        ERLANG_VERSION=(@= erlang_version @)
        GITHUB_RUN_ID=${{ github.run_id }}
        GITHUB_SHA=${{ github.sha }}
        base_rmq_ref=(@= data.values.base_rmq_ref @)
        current_rmq_ref=${{ steps.ref.outputs.branch_or_tag_name }}
        RABBITMQ_VERSION=(@= rabbitmq_version @)
  - name: RUN TESTS
    run: |
      mkdir deps/(@= dep.name @)/logs && chmod 777 deps/(@= dep.name @)/logs
      docker run \
        --env project=(@= dep.name @) \
        --volume ${PWD}/deps/(@= dep.name @)/logs:/workspace/ct-logs \
        --oom-kill-disable \
        (@= ci_image(erlang_version) @) \
        ci/scripts/tests.sh
  #@ else:
  - name: RUN TESTS
    if: steps.cache.outputs.cache-hit != 'true'
    run: |
      function run_tests() {
        make -C deps/(@= dep.name @) tests \
          base_rmq_ref=(@= data.values.base_rmq_ref @) \
          current_rmq_ref=${{ steps.ref.outputs.branch_or_tag_name }} \
          FULL= \
          FAIL_FAST=1 \
          SKIP_AS_ERROR=1
      }
      (@= tests_cmd @)
  #@ end
  - name: ON FAILRUE ARCHIVE TESTS LOGS
    if: failure()
    run: |
      make -C deps/(@= dep.name @) ct-logs-archive
  - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
    #! https://github.com/marketplace/actions/upload-artifact
    uses: actions/upload-artifact@v2-preview
    if: failure()
    with:
      name: (@= dep.name @)-ct-logs
      path: "deps/(@= dep.name @)/*-ct-logs-*.tar.xz"
  - name: CACHE SUCCESSFUL TEST RESULT
    if: steps.cache.outputs.cache-hit != 'true'
    run: |
      mkdir -p test-result-cache
      date > test-result-cache/(@= dep.name @)
#@ end
