#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")
#@ load("util.star", "is_unique", "to_build_args")
#@ load("helpers.star", "ci_image_tag", "ci_dep_image", "skip_ci_condition")

#@ def checks_job(dep, erlang_version=None):
name: #@ dep.name + "-checks"
needs: [prepare]
runs-on: ubuntu-18.04
if: #@ skip_ci_condition()
#@yaml/text-templated-strings
steps:
  - name: CHECKOUT REPOSITORY
    uses: actions/checkout@v2
  - name: VALIDATE KNOWN CT SUITES
    env:
      project: #@ dep.name
    #@ suite_names = [suite.name for suite in dep.suites]
    #@ None if is_unique(suite_names) else assert.fail('{} suite names are not unique'.format(dep.name))
    run: |
      ci/scripts/validate-workflow.sh (@= " ".join(suite_names) @)
  - name: RUN EUNIT
    run: |
      make eunit \
        base_rmq_ref=(@= data.values.base_rmq_ref @) \
        current_rmq_ref=${{ steps.ref.outputs.branch_or_tag_name }} \
        FULL= \
        FAIL_FAST=1 \
        SKIP_AS_ERROR=1
#@ end

#@ def ct_suites_job(dep, suite_name, erlang_version=None):
name: #@ dep.name + "-ct-" + suite_name
needs:
  - prepare
  - #@ dep.name + "-checks"
runs-on: ubuntu-18.04
if: #@ skip_ci_condition()
#@yaml/text-templated-strings
steps:
  - name: CHECKOUT REPOSITORY
    uses: actions/checkout@v2
  - name: CONFIGURE OTP & ELIXIR
    uses: actions/setup-elixir@v1
    with:
      otp-version: #@ erlang_version
      elixir-version: #@ data.values.elixir_version
  - name: #@ "RUN ct-" + suite_name
    id: tests
    run: |
      make -C deps/(@= dep.name @) ct-(@= suite_name @) \
        base_rmq_ref=(@= data.values.base_rmq_ref @) \
        current_rmq_ref=${{ steps.ref.outputs.branch_or_tag_name }} \
        FULL= \
        FAIL_FAST=1 \
        SKIP_AS_ERROR=1
  - name: ON FAILRUE ARCHIVE TESTS LOGS
    if: failure() && steps.tests.outcome == 'failure'
    run: |
      make -C deps/(@= dep.name @) ct-logs-archive
  - name: ON FAILURE UPLOAD TESTS LOGS ARTIFACT
    #! https://github.com/marketplace/actions/upload-artifact
    uses: actions/upload-artifact@v2-preview
    if: failure() && steps.tests.outcome == 'failure'
    with:
      name: (@= dep.name @)-ct-(@= suite_name @)-logs
      path: "deps/(@= dep.name @)/*-ct-logs-*.tar.xz"
  #@ if erlang_version != "git":
  - name: DOWNLOAD SECONDARY UMBRELLAS ARCHIVE
    uses: actions/download-artifact@v2
    with:
      name: secondary-umbrellas.tar.xz
  - name: UNPACK SECONDARY UMBRELLAS ARCHIVE
    run: |
      set -ex
      tar Jxf secondary-umbrellas.tar.xz
      rm secondary-umbrellas.tar.xz
  #@ for version in data.values.secondary_umbrella_gitrefs:
  #@   logs_dir = 'ct-{}-logs-{}'.format(suite_name, version)
  #@   step_id = "tests-{}".format(version.replace(".","_"))
  - name: #@ "RUN ct-{} [mixed {}]".format(suite_name, version)
    id: #@ step_id
    run: |
      make -C deps/(@= dep.name @) distclean-ct ct-(@= suite_name @) \
        base_rmq_ref=(@= data.values.base_rmq_ref @) \
        current_rmq_ref=${{ steps.ref.outputs.branch_or_tag_name }} \
        FULL= \
        FAIL_FAST=1 \
        SKIP_AS_ERROR=1
        SECONDARY_UMBRELLA_VERSION=$PWD/umbrellas/(@= version @) \
        RABBITMQ_FEATURE_FLAGS=
  - name: #@ 'ON FAILURE ARCHIVE TESTS LOGS [mixed {}]'.format(version)
    if: failure() && steps.tests.outcome == 'failure'
    run: |
      make -C deps/(@= dep.name @) ct-logs-archive
  - name: #@ 'ON FAILURE UPLOAD TESTS LOGS ARTIFACT [mixed {}]'.format(version)
    #! https://github.com/marketplace/actions/upload-artifact
    uses: actions/upload-artifact@v2-preview
    #! For whatever reason, "if: steps.(@= suite @).outcome == 'failure'" never executes,
    #! so just run always
    if: failure() && steps.(@= step_id @).outcome == 'failure'
    with:
      name: (@= dep.name @)-ct-(@= suite_name @)-logs-mixed-(@= version @)
      path: "deps/(@= dep.name @)/*-ct-logs-*.tar.xz"
  #@ end
  #@ end
#@ end

#@ def collect_job(dep, erlang_version=None):
name: #@ dep.name
needs: #@ [dep.name + "-checks"] + [dep.name + "-ct-" + suite.name for suite in dep.suites]
runs-on: ubuntu-18.04
#! See https://docs.github.com/en/free-pro-team@latest/actions/reference/context-and-expression-syntax-for-github-actions#job-status-check-functions
#! as to why '(success() || failure())' is needed
if: #@ skip_ci_condition() + " && (success() || failure())"
#@yaml/text-templated-strings
steps:
- name: #@ "FAN IN {} SUITES".format(dep.name)
  run: |
    echo "Success"
#@ end