#@ load("@ytt:data", "data")
#@ load("util.star", "to_build_args")
#@ load("helpers.star", "ci_image", "ci_image_tag", "skip_ci_condition")

#@ def prepare_jobs(erlang_version=None, build_erlang=False):
prepare:
  name: prepare
  runs-on: ubuntu-18.04
  if: #@ skip_ci_condition()
  outputs:
    branch_or_tag_name: ${{ steps.ref.outputs.branch_or_tag_name }}
  #@yaml/text-templated-strings
  steps:
    - name: CHECKOUT REPOSITORY
      uses: actions/checkout@v2
    - name: CONFIGURE OTP & ELIXIR
      uses: actions/setup-elixir@v1
      with:
        otp-version: #@ erlang_version
        elixir-version: #@ data.values.elixir_version
    - name: CHECK RABBITMQ COMPONENTS
      id: ref
      run: |
        branch_or_tag_name=${GITHUB_REF#refs/*/}
        echo "::set-output name=branch_or_tag_name::$branch_or_tag_name"
    #@ if build_erlang:
    - name: CHECKOUT ERLANG/OTP MASTER
      uses: actions/checkout@v2
      with:
        repository: erlang/otp
        path: erlang-git-master
    - name: DETERMINE ERLANG SHA
      id: erlang_sha
      run: |
        cd erlang-git-master
        erlang_sha=$(git rev-parse HEAD)
        echo "::set-output name=erlang_sha::$erlang_sha"
    - name: CLEANUP ERLANG/OTP MASTER
      run: |
        rm -rf erlang-git-master
    #@ end
    #@ if erlang_version != "git":
    - name: CACHE SECONDARY UMBRELLAS
      uses: actions/cache@v1
      with:
        path: umbrellas
        key: #@ "secondary-umbrellas-{}-erlang-{}".format("-".join(data.values.secondary_umbrella_gitrefs), erlang_version)
    - name: PREPARE SECONDARY UMBRELLA COPIES
      #@ versions = " ".join(data.values.secondary_umbrella_gitrefs)
      run: |
        set -ex
        for version in (@= versions @); do
          umbrella="umbrellas/$version"
          if ! test -d "$umbrella"  ||
              ! make -C "$umbrella/deps/rabbit" test-dist; then
            rm -rf "$umbrella"
            # Fetch the master Umbrella; the final umbrellas are created from
            # the master copy.
            if ! test -d umbrellas/master; then
              git config --global advice.detachedHead false
              git clone \
                https://github.com/rabbitmq/rabbitmq-public-umbrella.git \
                umbrellas/master
              make -C umbrellas/master co # To get RabbitMQ components.
            fi
            # We copy the master Umbrella and checkout the appropriate tag.
            cp -a umbrellas/master "$umbrella"
            git -C "$umbrella" checkout "master"
            make -C "$umbrella" up BRANCH="$version"
            # To remove third-party deps which were checked out when the
            # projects were on the `master` branch. Thus, possibly not the
            # version pinning we expect. We update the Umbrella one last time
            # to fetch the correct third-party deps.
            make -C "$umbrella" clean-3rd-party-repos
            make -C "$umbrella" up
            make -C "$umbrella/deps/rabbit" test-dist
            rm -rf "$umbrella"/deps/rabbitmq_website
            rm -rf "$umbrella"/deps/rabbitmq_prometheus/docker
            rm -rf "$umbrella"/deps/*/{.git,test} "$umbrella"/.git
          fi
        done
        rm -fr umbrellas/master
    - name: CREATE SECONDARY UMBRELLAS ARCHIVE
      run: |
        set -ex
        tar cf - umbrellas | xz > secondary-umbrellas.tar.xz
    - name: UPLOAD SECONDARY UMBRELLAS ARCHIVE
      uses: actions/upload-artifact@v2
      with:
        name: secondary-umbrellas.tar.xz
        path: secondary-umbrellas.tar.xz
    #@ end
xref:
  name: xref
  #@ if build_erlang:
  needs: [prepare]
  #@ end
  runs-on: ubuntu-18.04
  if: #@ skip_ci_condition()
  #@yaml/text-templated-strings
  steps:
    - name: CHECKOUT REPOSITORY
      uses: actions/checkout@v2
    - name: CONFIGURE OTP & ELIXIR
      uses: actions/setup-elixir@v1
      with:
        otp-version: #@ erlang_version
        elixir-version: #@ data.values.elixir_version
    #@ for dep in [d for d in data.values.deps if not getattr(d, "skip_xref", False)]:
    - name: RUN XREF (@= dep.name @)
      run: |
        make -C deps/(@= dep.name @) xref \
          base_rmq_ref=(@= data.values.base_rmq_ref @) \
          current_rmq_ref=${{ steps.ref.outputs.branch_or_tag_name }}
    #@ end

#@ if/end erlang_version != "git":
dialyze:
  name: dialyze
  #@ if build_erlang:
  needs: [prepare]
  #@ end
  runs-on: ubuntu-18.04
  if: #@ skip_ci_condition()
  #@yaml/text-templated-strings
  steps:
    - name: CHECKOUT REPOSITORY
      uses: actions/checkout@v2
    - name: CONFIGURE OTP & ELIXIR
      uses: actions/setup-elixir@v1
      with:
        otp-version: #@ erlang_version
        elixir-version: #@ data.values.elixir_version
    #@ for dep in [d for d in data.values.deps if not getattr(d, "skip_dialyzer", False)]:
    - name: RUN DIALYZE (@= dep.name @)
      run: |
        make -C deps/(@= dep.name @) dialyze \
          base_rmq_ref=(@= data.values.base_rmq_ref @) \
          current_rmq_ref=${{ steps.ref.outputs.branch_or_tag_name }} \
          FULL=
    #@ end
#@ end